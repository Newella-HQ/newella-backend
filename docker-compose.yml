services:
  auth-service:
    build:
      context: .
      dockerfile: ./docker/Dockerfile_AuthService
    container_name: auth-service
    restart: unless-stopped
    ports:
      - "${AUTH_SERVER_PORT}:${AUTH_SERVER_PORT}"
    depends_on:
      - postgres-db
    networks:
      - appnet

  user-service:
    build:
      context: .
      dockerfile: ./docker/Dockerfile_UserService
    container_name:   user-service
    restart: unless-stopped
    ports:
      - "${USER_SERVICE_GRPC_PORT}:${USER_SERVICE_GRPC_PORT}"
    depends_on:
      - postgres-db
    networks:
      - appnet

  postgres-db:
    image: postgres:alpine3.20
    container_name: postgres-db
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USERNAME}", "-d", "${POSTGRES_NAME}", "-p", "${POSTGRES_PORT}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    volumes:
      - newella_db_tmp:/var/lib/postgresql/data
    command: -p ${POSTGRES_PORT}
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT} # delete
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_NAME}
    networks:
      - appnet

  static-server:
    build:
      context: .
      dockerfile: ./docker/Dockerfile_StaticServer
    container_name: static-server
    restart: unless-stopped
    volumes:
      - newella_assets:/go/assets
    ports:
      - "${STATIC_SERVER_PORT}:${STATIC_SERVER_PORT}"
    networks:
      - appnet

volumes:
  newella_assets:
  newella_db_tmp:

networks:
  appnet:
    name: appnet
    driver: bridge